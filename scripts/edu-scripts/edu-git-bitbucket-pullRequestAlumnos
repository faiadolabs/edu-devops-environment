#!/bin/bash
source $(dirname "$0")/lib/git_functions.sh

# TODO: Documentarlo: Especifica el nombre de la rama del alumno EN REMOTO 
PARAM_BRANCH_REMOTE=$1

# Se comprueba que existe repo git en path actual
is_git_basedir
if [ "$?" -ne "0" ]; then
	exit 1
fi

# Obtener fichero de alumnos
# IMPROVE: Si el fichero de alumnos no existe, sigiere los disponibles y automatiza la copia
exist_file_alumnos
if [ "$?" -ne "0" ]; then
	exit 1
fi
fileAlumnos=.git/alumnos

####################################################################
# Compruebo si tengo las credenciasles en .netrc
####################################################################
exist_file $HOME/.netrc
if [ "$?" -ne "0" ]; then
	read_user_input "Bitbucket username"
	userAccount=$read_user_input_response
	echo -n "Password: "
	read -s userPassword
	loginParam="-u $userAccount:$userPassword"
	echo -ne "\n"
else
	loginParam="--netrc"
fi

####################################################################
# PARÁMETROS DEL PULL REQUEST
####################################################################
echo -ne "\n"
read_user_input "Título Pull Request" "Actualización del Enunciado"
pullRequestTitle=$read_user_input_response
read_user_input "Source Branch" "master-updated"
pullRequestSourceBranch=$read_user_input_response
read_user_input "Destination Branch" "master"
pullRequestDestinationBranch=$read_user_input_response

####################################################################
# POR CADA ALUMNO
####################################################################
while read alumnoUsername bitbucketAccount prefijoName sufijoRepo
do
	echo -ne "\n"
    # Hacer un trim de las cadenas (https://stackoverflow.com/a/19347380/1820838)
    alumnoUsername=${alumnoUsername//[$'\t\r\n']}
    bitbucketAccountAlu=${bitbucketAccount//[$'\t\r\n']}
	bitbucketAccountProf=iessanclemente

    prefijoName=${prefijoName//[$'\t\r\n']}
	sufijoRepo=${sufijoRepo//[$'\t\r\n']}

	# repositorio: Se toma el nombre local del repo por el directorio actual
	repoProf=${PWD##*/} # 

	# repositorio del alumno: se concatena el sufijo del repo sacándole la extensión .git
	# https://en.wikipedia.org/wiki/Cut_(Unix)
	repoNameAlumno=$(echo "$repoProf$sufijoRepo" | cut -d "." -f1) 
	remoteRefAlumno=$prefijoName$alumnoUsername

	# push de rama de actualización en repo alumno
	git push $remoteRefAlumno $pullRequestDestinationBranch:$pullRequestSourceBranch >/dev/null 2>&1
	CODE_PUSH=$? # recupero la salida del fetch
	if [ "$CODE_PUSH" == 0 ]; then
		echo -ne "${ok}\tgit push $remoteRefAlumno $pullRequestDestinationBranch:$pullRequestSourceBranch\n"
	
		# Por genero el pull request por API REST (CUIDADO!! es CASE-SENSITIVE. Asegurarse que los usernames sean correctos):
		CODE_CURL=$(curl -s https://api.bitbucket.org/2.0/repositories/$bitbucketAccountAlu/$repoNameAlumno/pullrequests \
			$loginParam \
			--output /dev/null \
			--write-out "%{http_code}" \
			--request POST \
			--header 'Content-Type: application/json' \
			--data "{
				\"title\": \"$pullRequestTitle\",
				\"source\": {
					\"branch\": {
						\"name\": \"$pullRequestSourceBranch\"
					}
				},
				\"destination\": { 
					\"branch\": { 
						\"name\": \"$pullRequestDestinationBranch\" 
					}
				},
				\"reviewers\": [ 
						{ \"username\": \"$bitbucketAccountAlu\" }
					],
				\"close_source_branch\": true
			}"
		)
		if [ "$CODE_CURL" == 200 ] || [ "$CODE_CURL" == 201 ] || [ "$CODE_CURL" == 202 ]; then
			# Correcto
			echo -ne "${ok}\tCreado pull request para $alumnoUsername\n"
		else
			# Error
			echo -ne "${fallo}NO se ha creado el pull request para $alumnoUsername.\n"
		fi
	else
		echo -ne "${fallo}git push $remoteRefAlumno $pullRequestDestinationBranch:$pullRequestSourceBranch\n"
	fi
	
done < "$fileAlumnos"
echo -ne "\n${completado}\n\n"
exit 0
